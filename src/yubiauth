#!/usr/bin/perl -T
#
# Copyright 2013 Blue Box Group, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
use strict;
use warnings;
use IO::Socket::UNIX qw( SOCK_STREAM );
use constant {
    YUBIAUTH_CONFIG => '/etc/yubiauth.conf'
};

sub parse_config($) {
    my $filename = shift;

    open(CONFIG, '<', $filename)
        or return undef;

    my $config = {};

    while (my $line = <CONFIG>) {
        chomp($line);

        # Trim comments and trailing whitespace
        $line =~ s/\s*(?:#.*)?$//;

        # Skip blank lines
        next unless $line;

        # Trim leading whitespace
        $line =~ s/^\s*//;

        if ($line =~ m/^auth_socket\s+([\/\.\-\w]+)/) {
            $config->{authentication_socket} = $1;
        } else {
            print STDERR "Unexpected configuration on line $.:\n$line\n";
            return undef;
        }
    }
    close(CONFIG);

    return $config;
}

sub main() {
    unless (scalar(@ARGV) == 1) {
        print STDERR "Usage:\n\tyubiauth <yubi token>\n";
        exit 1;
    }

    my $yubi_token = shift @ARGV;

    my $config = parse_config(YUBIAUTH_CONFIG);
    my $auth_sock = $config->{authentication_socket}
        or die "Configuration did not define auth_sock\n";

    die $auth_sock . " is not a socket\n" unless -S $auth_sock;

    # Set an alarm in case the server does not respond in a timely manner
    local $SIG{ALRM} = sub { die "yubiauth: timed out" };
    alarm 3;

    my $sock = IO::Socket::UNIX->new($auth_sock)
        or die "Unable to connect to " . $auth_sock . ": $!";

    $sock->print($yubi_token);

    exit 1 unless $sock->getline() eq "AUTHENTICATION SUCCESSFUL\n";

    exit 0;
}

main();
